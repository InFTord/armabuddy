class WA_Encoder:
    intab = bytes(i for i in range(256))
    outtab = (  # https://worms2d.info/WA_character_table
        '\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F'
        '"&\'<>\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        '\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F'
        '\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F'
        '\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F'
        '\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F'
        '\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F'
        '\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x00'
        'БГДЖЗИЙКЛПУФЦЧШЩ'
        'ЪЫЬЭЮ\x00ЯбвгджзийŸ'
        '\xA0\xA1к\xA3\x00лмнптфцчшщъ'
        'ыьэюяŐőŰűĞğŞşİı\xBF'
        '\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF'
        '\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF'
        '\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF'
        '\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF'
    )

    decode_table = dict(zip(intab, outtab))
    encode_table = dict(zip(outtab, (bytes([i]) for i in intab)))  # genexpr to avoid byte to int conversion of values
    trans_table = ''.maketrans(
        'аеёорстухАВЕЁМНОРСТХĄąĆćĘęŁłŃńŚśŹźŻż',
        'aeëopcтyxABEËMHOPCTXAaCcEeLlNnSsZzZz'
    )

    @classmethod
    def decode(cls, text: bytes):
        return ''.join(cls.decode_table[char] for char in text)

    @classmethod
    def encode(cls, text: str):
        return b''.join(cls.encode_table.get(char, b'\x20') for char in text)

    @classmethod
    def translate(cls, text: str):
        return text.translate(cls.trans_table)
